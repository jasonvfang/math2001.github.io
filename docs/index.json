[
    {
        "uri": "/post/my-new-blog",
        "content": "---\ndate: \"2017-09-09T19:43:23+10:00\"\ntitle: My new blog\ncategories: [About]\ntags: [new, hugo, static website]\n---\n\nThis is my new blog, powered by Hugo, a go static website generator. You probably\nheard of it. It's super fast.\n\n",
        "tags": []
    },
    {
        "uri": "/post/my-zen",
        "content": "---\ntitle: My Zen\ndate: 2017-09-13T14:18:22+10:00\ncategories: [code aesthetic]\ntags: [python, zen, conventions]\ndraft: true\n---\n\nPython is by far my favorite language (I event wish we spoke it :smile:).\n\nOn thing I found funny, and in the same time really good is [its\nzen](https://python.org/dev/peps/pep-0020/).\n\nSo, today, dans un élan d'inspiration, I decided to write my own.\n\nKeep it simple.\nLazyness is a quality.\nLearn to use your tools efficiently.\nGet inspired by great things.\nDo one thing, and do it well.\nPerfect programmers don't need comments.\nBut every user needs documentation.\n",
        "tags": []
    },
    {
        "uri": "/project/ski",
        "content": "---\ntitle: Ski\nslug: ski\ndate: '2017-09-10T10:58:02+10:00'\ncategories: \n    plugin\ntags: \n    vim\n    sessions\n---\n\nA little vim plugin. Messy. Very messy.\n",
        "tags": []
    },
    {
        "uri": "/tip/network-throttling",
        "content": "---\ntitle: Network throttling\nslug: network-throttling\ndate: '2017-08-20'\ncategories: [ \"web development\" ]\ntags: [ \"chrome\", \"devtools\", \"network\", \"performances\", \"testing\" ]\n---\n\nEver wanted to simulate a slow connection? Well, the chrome's DevTools makes it\nvery easy to do!\n\nOpen it up (kbdctrl+shift+i/kbd), in the Network tab, find the\nNo throttling dropdown menu, and you're good to go\n",
        "tags": []
    },
    {
        "uri": "/tip/py-string-module",
        "content": "---\ntitle: The string module in Python\nslug: string-module-python\ncategories: [ itsbuiltin ]\ntags: [ python, module, string, alphabet ]\ndate: 2017-08-20\n---\n\nIf you want the list of every letter, just do:\n\n import string\n print(string.ascii_uppercase)\nABCDEFGHIJKLMNOPQRSTUVWXYZ\n\n",
        "tags": []
    },
    {
        "uri": "/tip/vim-ascii",
        "content": "---\ntitle: How do I get the ASCII value of a character in vim?\nslug: get-ascii-value-character-vim\ncategories: [ cool feature ]\ntags: [ vim, ascii ]\ndate: 2017-08-26\nplace: In the car, going to ski\n---\n\nTo get the ASCII value of the character under the cursor, just press ga (or\nrun :ascii).\n\nIt'll print it in three format: in decimal, hexadecimal and octal.\n\nSo, when your cursor is on an arrow and that you press ga: →, you'll see at the\nbottom:\n\n→ 8594, Hex: 2192, Octal: 20622\n Mnemonic: Get ASCII value.\n ­ from :help :ascii\n\n",
        "tags": []
    },
    {
        "uri": "/tip/vim-confirm",
        "content": "---\ntitle: The confirm option on VIM\nslug: config-option-vim\ntags: [ vim, option ]\ncategories: [ cool feature ]\ndate: 2017-07-03\n---\n\nThis is probably one of my favorite option in VIM. Just add this to your .vimrc:\n\n    set confirm\n\nThis will affect different command in VIM: instead of just failing (and telling\nyou to use force if you want to overwrite), it'll show a confirm \"popup\" at the\nbottom and you'll be good to do.\n\nQuick example\n\nWhen you want to quit a file that isn't saved, here's what you get:\n\n    E37: No write since last change (add ! to override)\n\nWith the confirm option on, you get\n\n    Save changes to \"tips/vim-confirm.md\"?\n    [Y]es, (N)o, (C)ancel:\n\nYou just need to press the corresponding letter (not even kbdenter/kbd), and\nyou'll be good to go!\n\n",
        "tags": []
    },
    {
        "uri": "/tip/vim-difference-readonly-modifiable",
        "content": "---\r\ntitle: The difference between the VIM options 'readonly' and 'modifiable'\r\nslug: difference-vim-options-readonly-modifiable\r\ntags: [ vim, options ]\r\ncategories: [ infos ]\r\ndate: 2017-08-26\r\nplace: In the car, on the way back from x-ski\r\n---\r\n\r\nAll the readonly does, when enabled, is it prevents you from writing the file\r\n(you can bypass it by doing :w! though), while modifiable, when disabled\r\nprevents you from actually editing the buffer.\r\n",
        "tags": []
    },
    {
        "uri": "/tip/vim-digraphs",
        "content": "---\r\ntitle: Vim digraphs\r\nslug: vim-digraphs\r\ntags: [ vim, symbols ]\r\ncategories: [ cool feature ]\r\ndate: 2017-08-25\r\nplace: In the car, next to my sister\r\n---\r\n\r\nThis is a pretty good thing if you use symbols that aren't on your keyboard, like\r\nthe copyright symbol for example (©).\r\n\r\nDo you know how much time it took me to insert this symbol? Less than a second...\r\nDo you know how much time it would have took you? Well, depending on your\r\ninternet connection, it might be about 10 seconds.\r\n\r\nSo, how did I do that? I just pressed kbdctr+k/kbd+kbdCo/kbd (in insert\r\nmode).\r\n\r\nkbdctrl+k/kbd in insert mode listens for a shortcut, which will then insert\r\nthe corresponding symbol.\r\n\r\nHow do you know which one it is? Just look for it in the :digraphs list!\r\n\r\nYou can also define your own digraph:\r\n\r\n`vim\r\n:digraph .. …\r\n`\r\n\r\nYou can also specify the decimal value of the symbol, like so:\r\n\r\n`vim\r\n:diagraph .. 8230\r\n`\r\n\r\nYou might be wondering how you get the value... Well, have a look at this: tiplink to=\"vim-ascii.md\"/tiplink\r\n\r\nLittle cheat sheet\r\n\r\nBecause I'm nice (:smile:), I made a little list of the ones you might be likely\r\nto use:\r\n\r\n    Abbreviation → Symbol \r\n    Co → ©\r\n    TM → ™\r\n    - → →\r\n    <- → ←\r\n    = → ⇒\r\n    <= → ⇐\r\n    12 → ½\r\n    22 → ²\r\n    << → «\r\n     → »\r\n    Eu → €\r\n    $$ → £\r\n    RT → √\r\n    -- → ­\r\n\r\n\r\n If you're french\r\n\r\n    Abbreviation → Symbol\r\n    e! → è\r\n    e' → é\r\n    e → ê\r\n    e\" → ë\r\n    oe → œ\r\n\r\nNote: use upper cased abbreviation to get upper cased symbols\r\n\r\nTo learn more: :help digraphs\r\n\r\n",
        "tags": []
    },
    {
        "uri": "/tip/vim-dynamic-open",
        "content": "---\r\ntitle: DynamicOpen function in VIM \r\nslug: dynamicopen-function-vim\r\ntags: [ vim, vimscript ]\r\ncategories: [ cool feature ]\r\ndate: 2017-08-27\r\nplace: In the car\r\n---\r\n\r\nI really open my .vimrc often. Too often to have to type :e ~/.vimrc or\r\n:tabe ~/.vimrc every time.\r\n\r\nHere's a little function that will open a file in a new tab if there isn't enough\r\nroom for a new split, and, you guessed it, in a new vertical split if there\r\nis.\r\n\r\n`vim\r\nfunction! DynamicOpen(file)\r\n    if winwidth(win_getid())  160\r\n        execute \"vsplit \".a:file\r\n    else\r\n        execute \"tabe \".a:file\r\n    endif\r\nendfunction\r\n\r\nnnoremap leaderev :call DynamicOpen($MYVIMRC)CR\r\n`\r\n\r\nIt just checks with width of the current window.\r\n\r\nMore infos: :help window-functions\r\n",
        "tags": []
    },
    {
        "uri": "/tip/vim-great-resources",
        "content": "---\ntitle: Great resources for VIM users \nslug: great-resources-for-vim-users\ntags: [ vim, vimscript, resources ]\ncategories: [ resources ]\ndate: 2017-08-03\n---\n\nIf you're a VIM user, have a look at these resources, they're pretty good (you\nprobably will know some ­ if not all ­ of them)\n\nvimcast.org Just awesome screencasts and tips in general\nvimcolors.com A list of color schemes\nvimawesome.com A website listing vim plugin\nvi.stackexchange.com The stack exchange website for VIM\n\n",
        "tags": []
    },
    {
        "uri": "/tip/vim-help-index",
        "content": "---\r\ntitle: Vim help index\r\nslug: vim-help-index\r\ntags: [ vim, doc ]\r\ncategories: [ infos ]\r\ndate: 2017-08-25\r\n---\r\n\r\nA very strong point of vim is its documentation. There's just so much of it!!\r\n\r\nSo, use it\r\n\r\nIt doesn't matter if you're an experienced user of vim or a complete beginner,\r\nthere'll be something in there for you to learn for sure.\r\n\r\nWhere could you start? Well, at the index of course! Just type :help and hit\r\nkbdenter/kbd and scroll down a bit.\r\n\r\nSee that? You got a few kind of \"tutorials\" (I especially like the one `Clever\r\ntricks`). Looks like you got a lot of learning to go :smile:!\r\n",
        "tags": []
    },
    {
        "uri": "/tip/vim-highlight-words",
        "content": "---\ntitle: Highlight every occurrences of the word under the cursor in VIM\nslug: highlight-every-occurrences-word-under-cursor-vim\ntags: [ vim, vimscript ]\ncategories: [ cool feature ]\ndate: 2017-08-22\n---\n\n[ A feature of Sublime Text I really enjoyed was highlighting every occurrence of ]\nthe selected word.\n\nSo, here's the VIM way. It's not implemented by default, but a bit of vimscript\nnever hurt anyone, right?\n\nSo, it's going to be a bit different than Sublime Text's version, because I\nthinks it's even better, but it's up to you to tweak this if you want to ;)\n\nIt's going to be a function that does this:\n\nif the cursor is on a word that has been highlighted\n    clear the highlights\notherwise, simply highlight the matches\n\nSo, here's our function:\n\nfunction! ToggleHighlightWordUnderCursor()\n    \" get the current matches\n    let matches = getmatches()\n    \" get the word under the cursor\n    let cword = expand('cword')\n    \" if there is some matches AND the cursor is on one of them\n    if !empty(matches) && printf('\\%s\\', cword) ==# matches0\n        match none\n        echo \"Matches cleared\"\n    else\n        \" highlight the matches with the 'scope' IncSearch (the one used when you\n        \" do a regular search)\n        silent! exe printf('match IncSearch /\\%s\\/', cword)\n        \" Extra: echo how many matches there is\n        redir = nbmatches\n            silent! exe \"%s/\".cword.\"//gn\"\n        redir END\n        let nbmatches = str2nr(Strip(split(nbmatches, ' ')[0]))\n        echo printf('Found %s match%s', nbmatches, nbmatches  1 ? 'es' : '')\n        \" move cursor back to its previous position, since it has been moved to\n        \" the beginning of the line by :match \n        execute \"normal! \\C-o\"\n    endif\nendfunction\n\nAnd now, just bind it to a shortcut:\n\nnnoremap silent leaderw :call ToggleHighlightWordUnderCursor()CR\n\" for convenience\nnnoremap silent leaderW :match noneCR\n\nSo now, just press kbd&lt;leader&gt;w/kbd.\n\nPressing kbd&lt;leader&gt;W/kbd will clear the highlights, wherever you are.\n",
        "tags": []
    },
    {
        "uri": "/tip/vim-insert-date",
        "content": "---\ntitle: How to insert the date in Vim?\nslug: how-to-insert-the-date-in-vim\ntags: [ vim, date, strftime ]\ncategories: [ cool feature ]\ndate: 2017-08-20\n---\n\nFirst off, I really don't recommend you use the strftime() function vim has,\nsince, as it says in the help message (:help strftime)\n\n The accepted {format} depends on your system, thus this is not portable!\n\nSo, a somewhat better solution is to use the date shell command. Yes, it seems\neven less portable, but at least you know for sure if it's going to work or not\n(with strftime(), I don't know if vim could get mixed up about the OS when you\nuse a simulate a Unix environment in your terminal)\n\n$ date +\"%A %d %B %Y @ %H:%M\"\nSunday 20 August 2017 @ 11:11\n\nSo, now, you just need to add this to your .vimrc\n\nfunction! Insert(text)\n    \" a simple function to insert text where the cursor is\n    execute \"normal! \\Esca\".a:text\nendfunction\n\nfunction! Strip(text)\n    return substitute(a:text, '^\\s*\\(.\\{-}\\)\\s*$', '\\1', '')\nendfunction\n\ncommand! InsertDate :call Insert(Strip(system('date +\"%A %d %B %Y @ %H:%M\"')))\n\nAll you need to do now is:\n\n:InsertDate\n\nAnd, you'll get the date inserted automatically.\n\nIf you want to customize the format of the date, I'd recommend using a tool like\nstrftime.net.\n\n",
        "tags": []
    },
    {
        "uri": "/tip/vim-last-command-bang",
        "content": "---\r\ntitle: Rerun last command with bang (force) in VIM \r\nslug: rerun-last-command-bang-vim\r\ntags: [ vim, vimscript, bang ]\r\ncategories: [ cool feature ]\r\ndate: 2017-08-27\r\nplace: In the car, on a snowy road\r\n---\r\n\r\nPut this little vim script in your .vimrc to rerun the previous command with\r\nthe bang (!) by just typing :Please.\r\n\r\n`vim\r\nfunction! BangLastCommand()\r\n    \" The last command that was run is stored in the register : (:registers)\r\n    let lastcommand = split(@:, ' ')\r\n    let command = lastcommand[0] . '! ' . join(lastcommand[1:], ' ')\r\n    execute command \r\nendfunction\r\n\r\ncommand! Please call BangLastCommand()\r\n`\r\n\r\nSo, now, if you do:\r\n\r\n    :e ~/.vimrc\r\n\r\nAnd you get an error because the current file has to be save, something like:\r\n\r\n    E37: No write since last change (add ! to override)\r\n\r\nYou can just do this:\r\n\r\n    :Please\r\n\r\nAnd it'll run\r\n\r\n    :e! ~/.vimrc\r\n\r\nPretty cool, hey? You can change the name Please to whatever you want, but it\r\nhas to start with a capitale letter. Here are a few suggestion:\r\n\r\n:Sudo: command! Sudo call s:RerunBangLastCommand()\r\n:Please!: command! -bang Sudo call s:RerunBangLastCommand()\r\n\r\nHave fun!\r\n",
        "tags": []
    },
    {
        "uri": "/tip/vim-map-buffer",
        "content": "---\r\ntitle: Current buffer only mapping in VIM \r\nslug: current-buffer-only-mapping-vim\r\ntags: [ vim, map, buffer ]\r\ncategories: [ cool feature ]\r\ndate: 2017-08-27\r\nplace: In a stopped car\r\n---\r\n\r\nIf you want to set a mapping only for the current buffer in VIM, it's super\r\nsimple: just use the buffer special argument, like so for example:\r\n\r\n`vim\r\nnnoremap buffer ,tip call InsertTipYamlFrontMatter()\r\n`\r\n\r\nLearn more: :help :map-local\r\n",
        "tags": []
    },
    {
        "uri": "/tip/vim-map-silent",
        "content": "---\r\ntitle: Silent command-line mapping in VIM \r\nslug: silent-command-line-mapping-vim\r\ntags: [ vim, map, command ]\r\ncategories: [ cool feature ]\r\ndate: 2017-08-27\r\nplace: From a very warm car\r\n---\r\n\r\nIf you want to set a mapping to run something that is echoed into the command\r\nline (something starting with : or / for example) to not be displayed, you\r\ncan use the special argument silent, like so for example:\r\n\r\n`vim\r\nmap silent leaderr :MyCommand\r\n`\r\n\r\nBy the way, tiplink to=\"vim-difference-map-noremap.md\"you should (almost) always use\r\nnoremap/tiplink.\r\n\r\nLearn more: :help :map-silent\r\n\r\n\r\n",
        "tags": []
    },
    {
        "uri": "/tip/vim-shell",
        "content": "---\r\ntitle: Change shell used to run external command in VIM\r\nslug: change-shell-run-external-command-vim\r\ntags: [ vim, shell, bash, windows, sh ]\r\ncategories: [ cool feature ]\r\ndate: 2017-08-27\r\nplace: In a car, with the 4 WD on\r\n---\r\n\r\nOn windows, the cmd sucks. But if you have sh installed from git-for-windows\r\nfor example, you can tell vim to run external commands :!.\r\n\r\nAdd this to your .vimrc\r\n\r\n`vim\r\nset shell=sh\r\nset shellcmdflag=-c\r\n`\r\n\r\nNow, vim won't run external commands like this\r\n\r\n    cmd /c \"your command\"\r\n\r\nBut like this:\r\n\r\n    sh -c \"your command\"\r\n\r\nSo, you can now run Unix commands from VIM.\r\n\r\nTo learn more: :help 'shell'\r\n",
        "tags": []
    },
    {
        "uri": "/tip/vim-variable-scope",
        "content": "---\r\ntitle: Variable scopes in vim\r\nslug: variable-scopes-vim\r\ntags: [ vim, scopes, variable, vimscript ]\r\ncategories: [ infos ]\r\ndate: \"2017-08-25\"\r\nplace: In the car on the way to the snow!\r\n---\r\n\r\nAn interesting feature of vim script is variable scoping. Here's a copy-paste\r\nfrom the documentation, just in case you never saw it before:\r\n\r\n`\r\nThere are several name spaces for variables.  Which one is to be used is\r\nspecified by what is prepended:\r\n\r\n                 (nothing) In a function: local to a function; otherwise: global\r\nbuffer-variable    b:      Local to the current buffer.\r\nwindow-variable    w:      Local to the current window.\r\ntabpage-variable   t:      Local to the current tab page.\r\nglobal-variable    g:      Global.\r\nlocal-variable     l:      Local to a function.\r\nscript-variable    s:      Local to a :source'ed Vim script.\r\nfunction-argument  a:      Function argument (only inside a function).\r\nvim-variable       v:      Global, predefined by Vim.\r\n`\r\n\r\nFrom :help internal-variables.\r\n\r\nSo, for example, in your ~/.vimrc, unless you're in a function, you shouldn't\r\nprefix plugin's options let's say with g:, you can just write the variable\r\nname.\r\n\r\n`vim\r\n\" no\r\nlet g:indentguidesauto_colors = 0\r\n\r\n\" yes\r\nlet indentguidesauto_colors = 0\r\n`\r\n\r\n",
        "tags": []
    }
]