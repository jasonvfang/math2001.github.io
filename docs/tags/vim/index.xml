<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vim on Math2001&#39;s blog</title>
    <link>https://math2001.github.io/tags/vim/</link>
    <description>Recent content in Vim on Math2001&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© Mathieu Paturel 2017</copyright>
    <lastBuildDate>Sun, 10 Sep 2017 10:58:02 +1000</lastBuildDate>
    
	<atom:link href="https://math2001.github.io/tags/vim/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Ski</title>
      <link>https://math2001.github.io/project/ski/</link>
      <pubDate>Sun, 10 Sep 2017 10:58:02 +1000</pubDate>
      
      <guid>https://math2001.github.io/project/ski/</guid>
      <description>A little vim plugin. Messy. Very messy.</description>
    </item>
    
    <item>
      <title>Change shell used to run external command in VIM</title>
      <link>https://math2001.github.io/tip/change-shell-run-external-command-vim/</link>
      <pubDate>Sun, 27 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://math2001.github.io/tip/change-shell-run-external-command-vim/</guid>
      <description>On windows, the cmd sucks. But if you have sh installed from git-for-windows for example, you can tell vim to run external commands :!.
Add this to your .vimrc
set shell=sh set shellcmdflag=-c  Now, vim won&amp;rsquo;t run external commands like this
cmd /c &amp;quot;your command&amp;quot;  But like this:
sh -c &amp;quot;your command&amp;quot;  So, you can now run Unix commands from VIM.
To learn more: :help &#39;shell&#39;</description>
    </item>
    
    <item>
      <title>Current buffer only mapping in VIM</title>
      <link>https://math2001.github.io/tip/current-buffer-only-mapping-vim/</link>
      <pubDate>Sun, 27 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://math2001.github.io/tip/current-buffer-only-mapping-vim/</guid>
      <description>If you want to set a mapping only for the current buffer in VIM, it&amp;rsquo;s super simple: just use the buffer special argument, like so for example:
nnoremap &amp;lt;buffer&amp;gt; ,tip call InsertTipYamlFrontMatter()  Learn more: :help :map-local</description>
    </item>
    
    <item>
      <title>DynamicOpen function in VIM</title>
      <link>https://math2001.github.io/tip/dynamicopen-function-vim/</link>
      <pubDate>Sun, 27 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://math2001.github.io/tip/dynamicopen-function-vim/</guid>
      <description>I really open my .vimrc often. Too often to have to type :e ~/.vimrc or :tabe ~/.vimrcevery time.
Here&amp;rsquo;s a little function that will open a file in a new tab if there isn&amp;rsquo;t enough room for a new split, and, you guessed it, in a new vertical split if there is.
function! DynamicOpen(file) if winwidth(win_getid()) &amp;gt; 160 execute &amp;quot;vsplit &amp;quot;.a:file else execute &amp;quot;tabe &amp;quot;.a:file endif endfunction nnoremap &amp;lt;leader&amp;gt;ev :call DynamicOpen($MYVIMRC)&amp;lt;CR&amp;gt;  It just checks with width of the current window.</description>
    </item>
    
    <item>
      <title>Rerun last command with bang (force) in VIM</title>
      <link>https://math2001.github.io/tip/rerun-last-command-bang-vim/</link>
      <pubDate>Sun, 27 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://math2001.github.io/tip/rerun-last-command-bang-vim/</guid>
      <description>Put this little vim script in your .vimrc to rerun the previous command with the bang (!) by just typing :Please.
function! BangLastCommand() &amp;quot; The last command that was run is stored in the register `:` (:registers) let lastcommand = split(@:, &#39; &#39;) let command = lastcommand[0] . &#39;! &#39; . join(lastcommand[1:], &#39; &#39;) execute command endfunction command! Please call BangLastCommand()  So, now, if you do:
:e ~/.vimrc  And you get an error because the current file has to be save, something like:</description>
    </item>
    
    <item>
      <title>Silent command-line mapping in VIM</title>
      <link>https://math2001.github.io/tip/silent-command-line-mapping-vim/</link>
      <pubDate>Sun, 27 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://math2001.github.io/tip/silent-command-line-mapping-vim/</guid>
      <description>If you want to set a mapping to run something that is echoed into the command line (something starting with : or / for example) to not be displayed, you can use the special argument silent, like so for example:
map &amp;lt;silent&amp;gt; &amp;lt;leader&amp;gt;r :MyCommand  By the way, you should (almost) always use noremap.
Learn more: :help :map-silent</description>
    </item>
    
    <item>
      <title>How do I get the ASCII value of a character in vim?</title>
      <link>https://math2001.github.io/tip/get-ascii-value-character-vim/</link>
      <pubDate>Sat, 26 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://math2001.github.io/tip/get-ascii-value-character-vim/</guid>
      <description>To get the ASCII value of the character under the cursor, just press ga (or run :ascii).
It&amp;rsquo;ll print it in three format: in decimal, hexadecimal and octal.
So, when your cursor is on an arrow and that you press ga: →, you&amp;rsquo;ll see at the bottom:
&amp;lt;→&amp;gt; 8594, Hex: 2192, Octal: 20622   Mnemonic: Get ASCII value. ­ from :help :ascii
 </description>
    </item>
    
    <item>
      <title>The difference between the VIM options &#39;readonly&#39; and &#39;modifiable&#39;</title>
      <link>https://math2001.github.io/tip/difference-vim-options-readonly-modifiable/</link>
      <pubDate>Sat, 26 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://math2001.github.io/tip/difference-vim-options-readonly-modifiable/</guid>
      <description>All the readonly does, when enabled, is it prevents you from writing the file (you can bypass it by doing :w! though), while modifiable, when disabled prevents you from actually editing the buffer.</description>
    </item>
    
    <item>
      <title>Variable scopes in vim</title>
      <link>https://math2001.github.io/tip/variable-scopes-vim/</link>
      <pubDate>Fri, 25 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://math2001.github.io/tip/variable-scopes-vim/</guid>
      <description>An interesting feature of vim script is variable scoping. Here&amp;rsquo;s a copy-paste from the documentation, just in case you never saw it before:
There are several name spaces for variables. Which one is to be used is specified by what is prepended: (nothing) In a function: local to a function; otherwise: global buffer-variable b: Local to the current buffer. window-variable w: Local to the current window. tabpage-variable t: Local to the current tab page.</description>
    </item>
    
    <item>
      <title>Vim digraphs</title>
      <link>https://math2001.github.io/tip/vim-digraphs/</link>
      <pubDate>Fri, 25 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://math2001.github.io/tip/vim-digraphs/</guid>
      <description>This is a pretty good thing if you use symbols that aren&amp;rsquo;t on your keyboard, like the copyright symbol for example (©).
Do you know how much time it took me to insert this symbol? Less than a second&amp;hellip; Do you know how much time it would have took you? Well, depending on your internet connection, it might be about 10 seconds.
So, how did I do that? I just pressed ctr+k+Co (in insert mode).</description>
    </item>
    
    <item>
      <title>Vim help index</title>
      <link>https://math2001.github.io/tip/vim-help-index/</link>
      <pubDate>Fri, 25 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://math2001.github.io/tip/vim-help-index/</guid>
      <description>A very strong point of vim is its documentation. There&amp;rsquo;s just so much of it!!
So, use it
It doesn&amp;rsquo;t matter if you&amp;rsquo;re an experienced user of vim or a complete beginner, there&amp;rsquo;ll be something in there for you to learn for sure.
Where could you start? Well, at the index of course! Just type :help and hit enter and scroll down a bit.
See that? You got a few kind of &amp;ldquo;tutorials&amp;rdquo; (I especially like the one Clever tricks).</description>
    </item>
    
    <item>
      <title>Highlight every occurrences of the word under the cursor in VIM</title>
      <link>https://math2001.github.io/tip/highlight-every-occurrences-word-under-cursor-vim/</link>
      <pubDate>Tue, 22 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://math2001.github.io/tip/highlight-every-occurrences-word-under-cursor-vim/</guid>
      <description>[ A feature of Sublime Text I really enjoyed was highlighting every occurrence of ] the selected word.
So, here&amp;rsquo;s the VIM way. It&amp;rsquo;s not implemented by default, but a bit of vimscript never hurt anyone, right?
So, it&amp;rsquo;s going to be a bit different than Sublime Text&amp;rsquo;s version, because I thinks it&amp;rsquo;s even better, but it&amp;rsquo;s up to you to tweak this if you want to ;)
It&amp;rsquo;s going to be a function that does this:</description>
    </item>
    
    <item>
      <title>How to insert the date in Vim?</title>
      <link>https://math2001.github.io/tip/how-to-insert-the-date-in-vim/</link>
      <pubDate>Sun, 20 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://math2001.github.io/tip/how-to-insert-the-date-in-vim/</guid>
      <description>First off, I really don&amp;rsquo;t recommend you use the strftime() function vim has, since, as it says in the help message (:help strftime)
 The accepted {format} depends on your system, thus this is not portable!
 So, a somewhat better solution is to use the date shell command. Yes, it seems even less portable, but at least you know for sure if it&amp;rsquo;s going to work or not (with strftime(), I don&amp;rsquo;t know if vim could get mixed up about the OS when you use a simulate a Unix environment in your terminal)</description>
    </item>
    
    <item>
      <title>Great resources for VIM users</title>
      <link>https://math2001.github.io/tip/great-resources-for-vim-users/</link>
      <pubDate>Thu, 03 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://math2001.github.io/tip/great-resources-for-vim-users/</guid>
      <description>If you&amp;rsquo;re a VIM user, have a look at these resources, they&amp;rsquo;re pretty good (you probably will know some ­ if not all ­ of them)
 vimcast.org Just awesome screencasts and tips in general vimcolors.com A list of color schemes vimawesome.com A website listing vim plugin vi.stackexchange.com The stack exchange website for VIM  </description>
    </item>
    
    <item>
      <title>The confirm option on VIM</title>
      <link>https://math2001.github.io/tip/config-option-vim/</link>
      <pubDate>Mon, 03 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://math2001.github.io/tip/config-option-vim/</guid>
      <description>This is probably one of my favorite option in VIM. Just add this to your .vimrc:
set confirm  This will affect different command in VIM: instead of just failing (and telling you to use force if you want to overwrite), it&amp;rsquo;ll show a confirm &amp;ldquo;popup&amp;rdquo; at the bottom and you&amp;rsquo;ll be good to do.
Quick example When you want to quit a file that isn&amp;rsquo;t saved, here&amp;rsquo;s what you get:</description>
    </item>
    
  </channel>
</rss>